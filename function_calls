import { useState, useRef, useEffect } from 'react'

interface EntityProps {
  id: string
  name: string
  attributes: string[]
  position: { x: number, y: number }
  isSelected?: boolean
  onSelect: (id: string) => void
  onMove: (id: string, position: { x: number, y: number }) => void
  enumData?: Record<string, string[]>
}

export function Entity({ 
  id, 
  name, 
  attributes, 
  position, 
  isSelected = false, 
  onSelect, 
  onMove,
  enumData = {}
}: EntityProps) {
  const [isDragging, setIsDragging] = useState(false)
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
  const [hoveredAttribute, setHoveredAttribute] = useState<number | null>(null)
  const entityRef = useRef<HTMLDivElement>(null)

  const handleMouseDown = (e: React.MouseEvent) => {
    if (entityRef.current) {
      const rect = entityRef.current.getBoundingClientRect()
      setDragOffset({
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      })
      setIsDragging(true)
      onSelect(id)
      e.stopPropagation()
    }
  }

  const handleMouseMove = (e: MouseEvent) => {
    if (isDragging && entityRef.current) {
      const container = entityRef.current.parentElement
      if (container) {
        const containerRect = container.getBoundingClientRect()
        const newX = e.clientX - containerRect.left - dragOffset.x
        const newY = e.clientY - containerRect.top - dragOffset.y
        
        onMove(id, { x: newX, y: newY })
      }
    }
  }

  const handleMouseUp = () => {
    setIsDragging(false)
  }

  // Add/remove event listeners
  useEffect(() => {
    if (isDragging) {
      window.addEventListener('mousemove', handleMouseMove)
      window.addEventListener('mouseup', handleMouseUp)
    }
    
    return () => {
      window.removeEventListener('mousemove', handleMouseMove)
      window.removeEventListener('mouseup', handleMouseUp)
    }
  }, [isDragging])

  // Get tooltip content for an attribute
  const getTooltipContent = (attr: string) => {
    // Extract column name and type
    const parts = attr.split(/\s+/);
    let colName = parts[0];
    let colType = '';
    
    // Check for type in parentheses
    const typeMatch = attr.match(/\((\w+)\)/);
    if (typeMatch) {
      colType = typeMatch[1];
    }
    
    // Remove PK: prefix if present
    if (colName.startsWith('PK:')) {
      colName = colName.substring(3).trim();
    }
    
    // Check if it's an enum type
    if (enumData[colType]) {
      return `Enum values: ${enumData[colType].join(', ')}`;
    }
    
    // Check if it's a primary key
    if (attr.includes('PK:') || attr.includes('[primary key]') || attr.includes('PRIMARY KEY')) {
      return 'Primary Key';
    }
    
    // Check if it's a foreign key
    if (attr.includes('[ref:') || attr.includes('FK:')) {
      const refMatch = attr.match(/ref:\s*([<>])\s*(\w+)\.(\w+)/);
      if (refMatch) {
        return `References ${refMatch[2]}.${refMatch[3]}`;
      }
      return 'Foreign Key';
    }
    
    return '';
  }

  // Determine if an attribute should have an icon
  const getAttributeIcon = (attr: string) => {
    // Check if it's a primary key
    if (attr.includes('PK:') || attr.includes('[primary key]') || attr.includes('PRIMARY KEY')) {
      return (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/>
        </svg>
      );
    }
    
    // Check if it's a foreign key
    if (attr.includes('[ref:') || attr.includes('FK:')) {
      return (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/>
        </svg>
      );
    }
    
    // Extract type from attribute
    const typeMatch = attr.match(/\((\w+)\)/);
    const colType = typeMatch ? typeMatch[1] : '';
    
    // Check if it's an enum
    if (enumData[colType]) {
      return (
        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
          <path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"/>
        </svg>
      );
    }
    
    // No icon for regular attributes
    return null;
  }

  return (
    <div 
      ref={entityRef}
      className="entity"
      style={{
        position: 'absolute',
        left: `${position.x}px`,
        top: `${position.y}px`,
        border: `2px solid ${isSelected ? '#61dafb' : '#555'}`,
        borderRadius: '8px',
        backgroundColor: '#2a2a2a',
        minWidth: '200px',
        cursor: isDragging ? 'grabbing' : 'grab',
        boxShadow: isSelected 
          ? '0 0 0 2px #61dafb, 0 4px 16px rgba(0,0,0,0.4)' 
          : '0 4px 8px rgba(0,0,0,0.3)',
        overflow: 'hidden',
        fontFamily: 'system-ui, -apple-system, BlinkMacSystemFont, sans-serif',
        zIndex: isSelected ? 2 : 1,
        transition: 'box-shadow 0.2s ease-in-out'
      }}
      onMouseDown={handleMouseDown}
      onClick={(e) => {
        e.stopPropagation()
        onSelect(id)
      }}
    >
      <div className="entity-header" style={{ 
        padding: '12px 16px', 
        borderBottom: '1px solid #444',
        fontWeight: 'bold',
        fontSize: '16px',
        textAlign: 'center',
        backgroundColor: '#383838',
        color: '#f8f8f8',
        position: 'relative'
      }}>
        {name}
      </div>
      <div className="entity-attributes" style={{ padding: '8px 0' }}>
        <ul style={{ 
          listStyle: 'none', 
          padding: 0, 
          margin: 0,
          maxHeight: '400px',
          overflowY: 'auto'
        }}>
          {attributes.map((attr, index) => {
            // Style differently based on attribute type
            const isPrimaryKey = attr.includes('PK:') || attr.includes('[primary key]') || attr.includes('PRIMARY KEY');
            const isForeignKey = attr.includes('[ref:') || attr.includes('FK:');
            
            // Extract type from attribute
            const typeMatch = attr.match(/\((\w+)\)/);
            const colType = typeMatch ? typeMatch[1] : '';
            const isEnum = enumData[colType] !== undefined;
            
            let itemColor = '#e0e0e0';
            
            if (isPrimaryKey) {
              itemColor = '#ffd700';
            } else if (isForeignKey) {
              itemColor = '#61dafb';
            } else if (isEnum) {
              itemColor = '#9c64f4';
            }
            
            const tooltipContent = getTooltipContent(attr);
            const icon = getAttributeIcon(attr);
            
            return (
              <li 
                key={index} 
                style={{ 
                  padding: '8px 16px',
                  display: 'flex',
                  alignItems: 'center',
                  borderLeft: `4px solid ${isPrimaryKey ? '#ffd700' : isForeignKey ? '#61dafb' : isEnum ? '#9c64f4' : 'transparent'}`,
                  backgroundColor: index % 2 === 0 ? '#303030' : '#2a2a2a',
                  color: itemColor,
                  position: 'relative'
                }}
                onMouseEnter={() => setHoveredAttribute(index)}
                onMouseLeave={() => setHoveredAttribute(null)}
              >
                {icon && (
                  <span style={{ marginRight: '8px', width: '16px', height: '16px', display: 'flex', alignItems: 'center' }}>
                    {icon}
                  </span>
                )}
                <span style={{ flexGrow: 1 }}>{attr}</span>
                
                {/* Tooltip */}
                {hoveredAttribute === index && tooltipContent && (
                  <div className="attribute-tooltip">
                    {tooltipContent}
                    <div className="attribute-tooltip-arrow"></div>
                  </div>
                )}
              </li>
            )
          })}
        </ul>
      </div>
    </div>
  )
} 